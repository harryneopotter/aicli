Critical observations
Incomplete and stubbed implementation. Many key functions are placeholders. The ContextManagerService methods for adding terminal output, user input and commands are empty, and getFullContext simply returns the current working directory without fetching git status or recent commands
raw.githubusercontent.com
. The AI agent’s extractToolCalls and integrateToolResults functions are stubs that return no tool calls and do not integrate tool results
raw.githubusercontent.com
. The code to call Gemini is “TODO” and just returns a string
raw.githubusercontent.com
.

No real integration with Tabby. While plugin.ts defines a TerminalDecorator that overrides terminal.write and terminal.onData, there is no Angular module or plugin registration. The build process uses webpack to compile plugin.ts to dist/index.js, but the plugin never actually registers the decorator with Tabby’s plugin API or exports it via an @NgModule—so it will not load in Tabby as written.

MCP installation is heavy‑handed. The script installs a large number of global npm packages (core servers plus optional servers) without checking if the user needs them or if they conflict with existing global packages
raw.githubusercontent.com
. It writes a .mcp/config.json that hard‑codes certain commands and env variables, which may not match the user’s environment.

Rigid command detection. The isCommand method relies on simple regexes (starting with letters, ./, /, drive letters, $, pipes or redirects) to decide if input is a command
raw.githubusercontent.com
. It will misclassify many valid commands (e.g. git log --oneline or npm i) as natural language because they include hyphens or spaces. Conversely, any English sentence beginning with a letter will be treated as a command and executed.

Context and tool calls not persisted. Session history is stored in memory but not persisted. There is no logic to compress or truncate contexts beyond cutting off the last 20 messages
raw.githubusercontent.com
. The tokenOptimization settings in the config schema describe compressing context and smart truncation
raw.githubusercontent.com
, but these features are not implemented in the code.

Discrepancies between README and code. The README refers to a PLAN.md file for fixes and improvements, but this file does not exist. It also instructs users to run node scripts/install-mcp-servers.js, which may require privileges and a stable internet connection; failure cases are not clearly handled. Some dependencies (Angular 15, Tabby Core 1.0) are locked to specific versions that may not be available or compatible.

Overall assessment
aicli is an ambitious but early‑stage attempt to embed a conversational AI inside the Tabby terminal. The architecture makes sense—intercept input, maintain context, call a local or remote model, and optionally invoke MCP tools for file access, git status or web search. However, the implementation is mostly scaffolding:

Many services contain placeholder methods.

The AI agent currently only calls a local Ollama model; Gemini API integration and tool‑call parsing are unimplemented
raw.githubusercontent.com
.

The plugin is not registered with Tabby, so it won’t function as a plugin without further work.

The MCP installer script aggressively installs dozens of npm packages globally, which is risky.

There are no tests, no linting and minimal error handling.

For a personal project, this repository could serve as a good starting point to experiment with AI‑assisted terminals and MCP. To make it useful, you would need to:

Flesh out the context manager to actually gather the working directory, git status and command history.

Implement extractToolCalls to parse model responses for tool invocations and integrate the results back into replies.

Provide an Angular module that registers the TerminalDecorator with Tabby and exports the plugin metadata from package.json.

Replace the simplistic command detection with a more reliable parser (e.g., detect commands by verifying that the first token exists on $PATH).

Implement or remove Gemini support; right now it is just a placeholder.

Provide a less invasive installation path for MCP servers (perhaps optional per‑tool installation) and clear guidance on dependencies.